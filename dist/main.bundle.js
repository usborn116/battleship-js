(()=>{"use strict";var e={426:(e,n,r)=>{r.d(n,{Z:()=>i});var t=r(537),o=r.n(t),a=r(645),s=r.n(a)()(o());s.push([e.id,'* {\n    margin: 0;\n    padding: 0;\n    box-sizing: inherit;\n  }\n  \n  html {\n    font-size: 62.5%;\n  }\n  \n  body {\n    box-sizing: border-box;\n    background-color: #353535;\n    color: #fff;\n    font-size: 1.6rem;\n    font-weight: 300;\n    font-family: "Noto Sans", sans-serif;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  h1, h2 {\n    font-size: inherit;\n    font-weight: inherit;\n  }\n  \n  .heading-primary {\n    font-size: 4rem;\n    font-weight: 400;\n    margin-bottom: 1rem;\n    letter-spacing: 1px;\n  }\n  \n  .heading-secondary {\n    margin-bottom: 1.5rem;\n    font-size: 3rem;\n    position: relative;\n    width: 100%;\n    text-align: center;\n  }\n  \n  .player-rotate-btn {\n    position: absolute;\n    top: 0;\n    right: 0rem;\n    padding: 1rem;\n    font-family: inherit;\n    font-size: inherit;\n    font-weight: 400;\n    color: inherit;\n    background-color: transparent;\n    border: 0;\n    border-radius: 50%;\n    width: 5rem;\n    height: 5rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .player-rotate-btn:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n  \n  .grid-container {\n    display: flex;\n  }\n  \n  .player1-interface,\n  .player2-interface {\n    margin: 2rem 6rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n  }\n  \n  .grid {\n    height: 40rem;\n    width: 40rem;\n    background-color: #284b63;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n  }\n  \n  .square {\n    border: 1px solid #000;\n  }\n  .square:hover {\n    cursor: pointer;\n  }\n  \n  .computer-square:hover {\n    background-color: #3c6e71;\n  }\n  \n  .shadow {\n    background-color: yellow;\n  }\n  \n  .red {\n    background-color: red;\n  }\n  \n  .green {\n    background-color: green;\n  }\n  \n  .white {\n    background-color: white;\n  }\n  \n  .grey:hover {\n    background-color: grey;\n  }\n  \n  /*# sourceMappingURL=styles.css.map */',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;EAClB;;EAEA;IACE,sBAAsB;IACtB,yBAAyB;IACzB,WAAW;IACX,iBAAiB;IACjB,gBAAgB;IAChB,oCAAoC;IACpC,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;EACzB;;EAEA;IACE,kBAAkB;IAClB,oBAAoB;EACtB;;EAEA;IACE,eAAe;IACf,gBAAgB;IAChB,mBAAmB;IACnB,mBAAmB;EACrB;;EAEA;IACE,qBAAqB;IACrB,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,kBAAkB;EACpB;;EAEA;IACE,kBAAkB;IAClB,MAAM;IACN,WAAW;IACX,aAAa;IACb,oBAAoB;IACpB,kBAAkB;IAClB,gBAAgB;IAChB,cAAc;IACd,6BAA6B;IAC7B,SAAS;IACT,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;EACrB;EACA;IACE,eAAe;IACf,oCAAoC;EACtC;;EAEA;IACE,aAAa;EACf;;EAEA;;IAEE,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;EACpB;;EAEA;IACE,aAAa;IACb,YAAY;IACZ,yBAAyB;IACzB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;EACrC;;EAEA;IACE,sBAAsB;EACxB;EACA;IACE,eAAe;EACjB;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,wBAAwB;EAC1B;;EAEA;IACE,qBAAqB;EACvB;;EAEA;IACE,uBAAuB;EACzB;;EAEA;IACE,uBAAuB;EACzB;;EAEA;IACE,sBAAsB;EACxB;;EAEA,qCAAqC",sourcesContent:['* {\n    margin: 0;\n    padding: 0;\n    box-sizing: inherit;\n  }\n  \n  html {\n    font-size: 62.5%;\n  }\n  \n  body {\n    box-sizing: border-box;\n    background-color: #353535;\n    color: #fff;\n    font-size: 1.6rem;\n    font-weight: 300;\n    font-family: "Noto Sans", sans-serif;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  h1, h2 {\n    font-size: inherit;\n    font-weight: inherit;\n  }\n  \n  .heading-primary {\n    font-size: 4rem;\n    font-weight: 400;\n    margin-bottom: 1rem;\n    letter-spacing: 1px;\n  }\n  \n  .heading-secondary {\n    margin-bottom: 1.5rem;\n    font-size: 3rem;\n    position: relative;\n    width: 100%;\n    text-align: center;\n  }\n  \n  .player-rotate-btn {\n    position: absolute;\n    top: 0;\n    right: 0rem;\n    padding: 1rem;\n    font-family: inherit;\n    font-size: inherit;\n    font-weight: 400;\n    color: inherit;\n    background-color: transparent;\n    border: 0;\n    border-radius: 50%;\n    width: 5rem;\n    height: 5rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .player-rotate-btn:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n  \n  .grid-container {\n    display: flex;\n  }\n  \n  .player1-interface,\n  .player2-interface {\n    margin: 2rem 6rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n  }\n  \n  .grid {\n    height: 40rem;\n    width: 40rem;\n    background-color: #284b63;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n  }\n  \n  .square {\n    border: 1px solid #000;\n  }\n  .square:hover {\n    cursor: pointer;\n  }\n  \n  .computer-square:hover {\n    background-color: #3c6e71;\n  }\n  \n  .shadow {\n    background-color: yellow;\n  }\n  \n  .red {\n    background-color: red;\n  }\n  \n  .green {\n    background-color: green;\n  }\n  \n  .white {\n    background-color: white;\n  }\n  \n  .grey:hover {\n    background-color: grey;\n  }\n  \n  /*# sourceMappingURL=styles.css.map */'],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(t)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);t&&s[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),s=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(s).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],c=t.base?l[0]+t.base:l[0],u=a[c]||0,d="".concat(c," ").concat(u);a[c]=u+1;var A=r(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var p=o(f,t);t.byIndex=i,n.splice(i,0,{identifier:d,updater:p,references:1})}s.push(d)}return s}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=r(a[s]);n[i].references--}for(var l=t(e,o),c=0;c<a.length;c++){var u=r(a[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=l}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{const e=(e,n)=>{let r=[];for(let n=0;n<e;n++)r.push(0);return{size:e,name:n,positions:r,hit:e=>{r[e]=1},isSunk:()=>!r.includes(0)&&(console.log(`${n} Sunk!`),!0)}},n=()=>{const e=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]];e.forEach(((e,n)=>{e.forEach(((n,r)=>{e[r]={ship:null,isHit:null}}))}));const n=(e,n,r)=>{const t=n[0];return n[1]+e.size>10&&"x"===r||t+e.size>10&&"y"===r},r=(r,t,o)=>{const a=t[0],s=t[1];if(n(r,t,o)){if("x"===o){const n=9-s,t=r.size-(n+1);for(let r=0;r<=n;r++)if(e[a][s+r].ship)return!1;for(let n=1;n<=t;n++)if(e[a][s-n].ship)return!1}else{const n=9-a,t=r.size-(n+1);for(let r=0;r<=n;r++)if(e[a+r][s].ship)return!1;for(let n=1;n<=t;n++)if(e[a-n][s].ship)return!1}return!0}if("x"===o){for(let n=0;n<r.size;n++)if(e[a][s+n].ship)return!1}else for(let n=0;n<r.size;n++)if(e[a+n][s].ship)return!1;return!0},t=n=>!!e[n[0]][n[1]].ship,o=(e,n)=>{for(let r=0;r<e.length;r++)if(e[r]!==n[r])return!1;return!0};return{grid:e,place:(t,o,a)=>{const s=o[0],i=o[1];if(!1!==r(t,o,a)){if(n(t,o,a))if("x"===a){const n=9-i,r=t.size-(n+1);for(let r=0;r<=n;r++)e[s][i+r].ship=t.name;for(let n=1;n<=r;n++)e[s][i-n].ship=t.name}else{const n=9-s,r=t.size-(n+1);for(let r=0;r<=n;r++)e[s+r][i].ship=t.name;for(let n=1;n<=r;n++)e[s-n][i].ship=t.name}else if("x"===a)for(let n=0;n<t.size;n++)e[s][i+n].ship=t.name;else for(let n=0;n<t.size;n++)e[s+n][i].ship=t.name;return e}},checkHit:t,receiveAttack:(n,r)=>{if(!0===t(n)){e[n[0]][n[1]].isHit=!0;const t=e[n[0]][n[1]].ship,a=[];let s;for(let n=0;n<10;n++)for(let r=0;r<10;r++)e[n][r].ship===t&&a.push([n,r]);for(let e=0;e<a.length;e++)o(n,a[e])&&(s=e);r.find((e=>e.name===t)).hit(s)}else e[n[0]][n[1]].isHit=!1},isGameOver:()=>{let n;return(()=>{const n=[];for(let r=0;r<10;r++)for(let t=0;t<10;t++)e[r][t].ship&&n.push(e[r][t]);return n})().forEach((e=>{null===e.isHit&&(n=!0)})),!0!==n},renderGameboard:(n=!1)=>{if(!0===n)for(let n=0;n<10;n++)for(let r=0;r<10;r++)!0===e[n][r].isHit&&document.querySelector(`#computer-square-${n}${r}`).classList.add("green"),!1===e[n][r].isHit&&document.querySelector(`#computer-square-${n}${r}`).classList.add("red");else for(let n=0;n<10;n++)for(let r=0;r<10;r++){if(e[n][r].ship&&document.querySelector(`#square-${n}${r}`).classList.add("white"),!0===e[n][r].isHit){const e=document.querySelector(`#square-${n}${r}`);e.classList.remove("white"),e.classList.add("green")}!1===e[n][r].isHit&&document.querySelector(`#square-${n}${r}`).classList.add("red")}},isValidPlacement:r,logAttack:e=>{!0===t(e)?console.log("Hit!"):console.log("Missed")}}};var t=r(379),o=r.n(t),a=r(795),s=r.n(a),i=r(569),l=r.n(i),c=r(565),u=r.n(c),d=r(216),A=r.n(d),f=r(589),p=r.n(f),m=r(426),g={};g.styleTagTransform=p(),g.setAttributes=u(),g.insert=l().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=A(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;const h=e(5,"carrier"),y=e(4,"battleship"),B=e(3,"destroyer"),I=e(3,"submarine"),b=e(2,"patrol"),C=e(5,"Carrier"),E=e(4,"Battleship"),v=e(3,"Destroyer"),q=e(3,"Submarine"),k=e(2,"Patrol"),x=[h,y,B,I,b],S=[C,E,v,q,k],w=n(),L=n(),z=((e,n,r)=>({name:e,gameboard:n,shipList:r,attack:(e,n)=>{e.gameboard.receiveAttack(n,e.shipList)}}))("Player 1",w,x),$=((e,n,r)=>({name:e,gameboard:n,shipList:r,attack:(e,n)=>{e.gameboard.receiveAttack(n,e.shipList)},attackRandom:e=>{const n=(e=>{const n=[];for(let r=0;r<10;r++)for(let t=0;t<10;t++)null===e.gameboard.grid[r][t].isHit&&n.push([r,t]);return n})(e),r=(t=n)[Math.floor(Math.random()*t.length)];var t;return e.gameboard.receiveAttack(r,e.shipList),r},seekValidAdjacentSquares:(e,n)=>{let r=e[0],t=e[1];const o=[];return r+1<10&&null===n.grid[r+1][t].isHit&&o.push([r+1,t]),r-1>-1&&null===n.grid[r-1][t].isHit&&o.push([r-1,t]),t+1<10&&null===n.grid[r][t+1].isHit&&o.push([r,t+1]),t-1>-1&&null===n.grid[r][t-1].isHit&&o.push([r,t-1]),o}}))("Player 2",L,S);let H="x";const M=document.querySelectorAll(".computer-square");document.getElementById("player-rotate-btn").addEventListener("click",(()=>{H="x"===H?"y":"x"}));const P=(e,n)=>{if("x"===H){let r;return r=n<10?n:parseInt(n.toString().slice(1)),r+e>10}{let r;return r=n<10?0:parseInt(n.toString().slice(0,1)),r+e>10}},j=e=>{if("x"===H){let n;return n=e<10?e:parseInt(e.toString().slice(1)),9-n}{let n;return n=e<10?0:parseInt(e.toString().slice(0,1)),9-n}},V=e=>{const n=document.querySelectorAll(".player-square");let r;1===e&&(r=b),2===e&&(r=I),3===e&&(r=B),4===e&&(r=y),5===e&&(r=h),console.log(`Place your ${r.name}`);let t=r.size;n.forEach(((e,r)=>{e.addEventListener("mouseover",(()=>{if(P(t,r))if("x"===H){for(let e=0;e<j(r)+1;e++)n[r+e].classList.add("shadow");for(let e=0;e<=t-(j(r)+1);e++)n[r-e].classList.add("shadow")}else{for(let e=0;e<j(r)+1;e++)n[r+10*e].classList.add("shadow");for(let e=0;e<=t-(j(r)+1);e++)n[r-10*e].classList.add("shadow")}else if("x"===H)for(let e=0;e<t;e++)n[r+e].classList.add("shadow");else for(let e=0;e<t;e++)n[r+10*e].classList.add("shadow")}))})),n.forEach(((e,r)=>{e.addEventListener("mouseout",(()=>{if(P(t,r))if("x"===H){for(let e=0;e<j(r)+1;e++)n[r+e].classList.remove("shadow");for(let e=0;e<=t-(j(r)+1);e++)n[r-e].classList.remove("shadow")}else{for(let e=0;e<j(r)+1;e++)n[r+10*e].classList.remove("shadow");for(let e=0;e<=t-(j(r)+1);e++)n[r-10*e].classList.remove("shadow")}else if("x"===H)for(let e=0;e<t;e++)n[r+e].classList.remove("shadow");else for(let e=0;e<t;e++)n[r+10*e].classList.remove("shadow")}))})),n.forEach(((o,a)=>{o.addEventListener("click",(t=>{const o=t.target.id.slice(7).split("").map((e=>parseInt(e)));if(w.isValidPlacement(r,o,H)){if(w.place(r,o,H),w.renderGameboard(),e++,N(n),6===e)return(()=>{let e=[];M.forEach((n=>{n.addEventListener("click",(n=>{const r=n.target.id.slice(16).split("").map((e=>parseInt(e)));if(!0!==$.gameboard.grid[r[0]][r[1]].isHit&&!1!==$.gameboard.grid[r[0]][r[1]].isHit)if(z.attack($,r),$.gameboard.logAttack(r),$.gameboard.checkHit(r)&&S.find((e=>e.name===$.gameboard.grid[r[0]][r[1]].ship)).isSunk(),L.renderGameboard(!0),!0===$.gameboard.isGameOver())console.log("Game Over! Player 1 Wins!");else{if(0===e.length){const n=$.attackRandom(z);!0===z.gameboard.grid[n[0]][n[1]].isHit&&(e=$.seekValidAdjacentSquares(n,z.gameboard))}else $.attack(z,e[0]),!1===z.gameboard.grid[e[0][0]][e[0][1]].isHit||$.seekValidAdjacentSquares(e[0],z.gameboard).forEach((n=>{JSON.stringify(e).includes(JSON.stringify(n))||e.push(n)})),e.shift();w.renderGameboard(!1),!0===z.gameboard.isGameOver()&&console.log("Game Over! Player 2 Wins!")}}))}))})(),void console.log("Placement phase over. Take the first shot.");V(e)}})),o.addEventListener("mouseover",(e=>{const n=e.target.id.slice(7),o=n.split("").map((e=>parseInt(e)));if(P(t,a)){if("x"===H){if(!1===w.isValidPlacement(r,o,H)){for(let e=0;e<j(a)+1;e++){let r;r=parseInt(n)<10?document.querySelector(`#square-0${parseInt(n)+e}`):document.querySelector(`#square-${parseInt(n)+e}`),r.style.background="grey"}for(let e=0;e<=t-(j(a)+1);e++){let r;r=parseInt(n)<10?document.querySelector("#square-0"+(parseInt(n)-e)):document.querySelector("#square-"+(parseInt(n)-e)),r.style.background="grey"}}}else if(!1===w.isValidPlacement(r,o,H)){for(let e=0;e<j(a)+1;e++){let r;r=parseInt(n)<10&&0===e?document.querySelector(`#square-0${parseInt(n)+10*e}`):document.querySelector(`#square-${parseInt(n)+10*e}`),r.style.background="grey"}for(let e=0;e<=t-(j(a)+1);e++){let r;r=parseInt(n)<10&&0===e?document.querySelector("#square-0"+(parseInt(n)-10*e)):document.querySelector("#square-"+(parseInt(n)-10*e)),r.style.background="grey"}}}else if("x"===H){if(!1===w.isValidPlacement(r,o,H))for(let e=0;e<t;e++){let r;r=parseInt(n)<10?document.querySelector(`#square-0${parseInt(n)+e}`):document.querySelector(`#square-${parseInt(n)+e}`),r.style.background="grey"}}else if(!1===w.isValidPlacement(r,o,H))for(let e=0;e<t;e++){let r;r=parseInt(n)<10&&0===e?document.querySelector(`#square-0${parseInt(n)+10*e}`):document.querySelector(`#square-${parseInt(n)+10*e}`),r.style.background="grey"}})),o.addEventListener("mouseout",(e=>{const n=e.target.id.slice(7),r=n.split("").map((e=>parseInt(e)));if(P(t,a)){if("x"===H){if(!1===w.isValidPlacement(h,r,H)){for(let e=0;e<j(a)+1;e++){let r;r=parseInt(n)<10?document.querySelector(`#square-0${parseInt(n)+e}`):document.querySelector(`#square-${parseInt(n)+e}`),r.style.background=""}for(let e=0;e<=t-(j(a)+1);e++){let r;r=parseInt(n)<10?document.querySelector("#square-0"+(parseInt(n)-e)):document.querySelector("#square-"+(parseInt(n)-e)),r.style.background=""}}}else if(!1===w.isValidPlacement(h,r,H)){for(let e=0;e<j(a)+1;e++){let r;r=parseInt(n)<10&&0===e?document.querySelector(`#square-0${parseInt(n)+10*e}`):document.querySelector(`#square-${parseInt(n)+10*e}`),r.style.background=""}for(let e=0;e<=t-(j(a)+1);e++){let r;r=parseInt(n)<10&&0===e?document.querySelector("#square-0"+(parseInt(n)-10*e)):document.querySelector("#square-"+(parseInt(n)-10*e)),r.style.background=""}}}else if("x"===H){if(!1===w.isValidPlacement(h,r,H))for(let e=0;e<t;e++){let r;r=parseInt(n)<10?document.querySelector(`#square-0${parseInt(n)+e}`):document.querySelector(`#square-${parseInt(n)+e}`),r.style.background=""}}else if(!1===w.isValidPlacement(h,r,H))for(let e=0;e<t;e++){let r;r=parseInt(n)<10&&0===e?document.querySelector(`#square-0${parseInt(n)+10*e}`):document.querySelector(`#square-${parseInt(n)+10*e}`),r.style.background=""}}))}))},N=e=>{e.forEach((e=>{const n=e.cloneNode(!0);e.parentNode.replaceChild(n,e)}))};V(1),(()=>{const e=e=>e[Math.floor(Math.random()*e.length)];S.forEach((n=>{let r=!1;const t=[];for(let e=0;e<10;e++)for(let n=0;n<10;n++)null===L.grid[e][n].ship&&t.push([e,n]);let o;o=0===Math.floor(2*Math.random())?"x":"y";let a=e(t);for(;!1===r;)L.isValidPlacement(n,a,o)?(L.place(n,a,o),r=!0):(a=e(t),o=0===Math.floor(2*Math.random())?"x":"y")}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,